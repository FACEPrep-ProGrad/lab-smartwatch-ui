function vidAns(ques_type) {
    $('.optionsparents .medians video#recorded').css('display', 'none');
    $('.optionsparents .medians video#gum').css('display', 'none');
    var mediaSource = new MediaSource();
    mediaSource.addEventListener('sourceopen', handleSourceOpen, false);
    var mediaRecorder;
    var recordedBlobs;
    var sourceBuffer;

    var gumVideo = document.querySelector('.optionsparents .medians video#gum');
    var recordedVideo = document.querySelector('.optionsparents .medians video#recorded');

    var recordButton = document.querySelector('.optionsparents .medians button#record');
    var playButton = document.querySelector('.optionsparents .medians button#play');
    var downloadButton = document.querySelector('.optionsparents .medians button#download');
    recordButton.onclick = toggleRecording;
    playButton.onclick = play;
    downloadButton.onclick = download;

// window.isSecureContext could be used for Chrome
    var isSecureOrigin = location.protocol === 'https:' ||
        location.host === 'localhost:5500' || location.host === g_url;
    if (!isSecureOrigin) {
        alert('getUserMedia() must be run from a secure origin: HTTPS or localhost.' +
            '\n\nChanging protocol to HTTPS');
        location.protocol = 'HTTPS';
    }
    var constraints;
    if (ques_type === 7) {
        constraints = {
            audio: true,
            video: false
        };
    } else {
        constraints = {
            audio: true,
            video: true
        };
    }


    navigator.mediaDevices.getUserMedia(
        constraints
    ).then(
        successCallback,
        errorCallback
    );

    function successCallback(stream) {
        console.log('getUserMedia() got stream: ', stream);
        window.stream = stream;
        gumVideo.srcObject = stream;
    }

    function stopCam() {
        gumVideo.srcObject.getTracks()[0].stop();
    }

    function errorCallback(error) {
        console.log('navigator.getUserMedia error: ', error);
    }

    function handleSourceOpen(event) {
        console.log('MediaSource opened');
        sourceBuffer = mediaSource.addSourceBuffer('video/webm; codecs="vp8"');
        console.log('Source buffer: ', sourceBuffer);
    }

    function handleDataAvailable(event) {
        if (event.data && event.data.size > 0) {
            recordedBlobs.push(event.data);
        }
    }

    function handleStop(event) {
        console.log('Recorder stopped: ', event);
    }

    function toggleRecording() {

        if (recordButton.textContent === 'Start Recording' || recordButton.textContent === 'ReRecord') {
            startRecording();
        } else {
            stopRecording();
            recordButton.textContent = 'Start Recording';
            playButton.disabled = false;
            downloadButton.disabled = false;
        }
    }

// The nested try blocks will be simplified when Chrome 47 moves to Stable
    function startRecording() {
        $('.optionsparents .medians video#gum').css('display', 'block');
        $('.optionsparents .medians video#recorded').css('display', 'none');
        var options = {mimeType: 'video/webm', bitsPerSecond: 100000};
        recordedBlobs = [];
        try {
            mediaRecorder = new MediaRecorder(window.stream, options);
        } catch (e0) {
            console.log('Unable to create MediaRecorder with options Object: ', e0);
            try {
                options = {mimeType: 'video/webm,codecs=vp9', bitsPerSecond: 100000};
                mediaRecorder = new MediaRecorder(window.stream, options);
            } catch (e1) {
                console.log('Unable to create MediaRecorder with options Object: ', e1);
                try {
                    options = 'video/vp8'; // Chrome 47
                    mediaRecorder = new MediaRecorder(window.stream, options);
                } catch (e2) {
                    alert('MediaRecorder is not supported by this browser.\n\n' +
                        'Try Firefox 29 or later, or Chrome 47 or later, with Enable experimental Web Platform features enabled from chrome://flags.');
                    console.error('Exception while creating MediaRecorder:', e2);
                    return;
                }
            }
        }
        console.log('Created MediaRecorder', mediaRecorder, 'with options', options);
        recordButton.textContent = 'Stop Recording';
        playButton.disabled = true;
        downloadButton.disabled = true;
        mediaRecorder.onstop = handleStop;
        mediaRecorder.ondataavailable = handleDataAvailable;
        mediaRecorder.start(10); // collect 10ms of data
        console.log('MediaRecorder started', mediaRecorder);
    }

    function stopRecording() {
        $('.optionsparents .medians video#gum').css('display', 'none');
        $('.optionsparents .medians video#recorded').css('display', 'block');
        mediaRecorder.stop();

        console.log('Recorded Blobs: ', recordedBlobs);

        recordedVideo.controls = true;
        recordButton.textContent = 'ReRecord';
        play();
    }

    function play() {
        var superBuffer = new Blob(recordedBlobs, {type: 'video/webm'});
        recordedVideo.src = window.URL.createObjectURL(superBuffer);
    }

    function download() {
        var blob = new Blob(recordedBlobs, {type: 'video/mp4'});
        var url = window.URL.createObjectURL(blob);
        console.log(url);
        console.log(blob);

        var a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = 'test.mp4';
        document.body.appendChild(a);
        a.click();

        //
        var fd = new FormData();

        fd.append('file', blob);

        $.ajax({
            url: "https://devapi.facenow.in/test/save-video/",
            type: 'POST',
            data: fd,
            processData: false,
            contentType: false,
            mimeType: "multipart/form-data",
            success: function (json) {
                console.log(json);
            },
            error: function () {
                console.log('error');
            }
        });
        setTimeout(function () {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }, 100);
    }
}

function revokeaccess() {
    var constraints;
    constraints = {
        audio: false,
        video: false
    };

    navigator.mediaDevices.getUserMedia(
        constraints
    ).then(
        successCallback,
        errorCallback
    );

    function successCallback(stream) {
        console.log('getUserMedia() got stream: ', stream);
        window.stream = stream;
        gumVideo.srcObject = stream;
    }

    function errorCallback(error) {
        console.log('navigator.getUserMedia error: ', error);
    }
}